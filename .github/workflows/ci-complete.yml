name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  DEBIAN_VERSION: 'bookworm'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage A: Build
  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            backend/nosd/go.sum
            agent/nos-agent/go.sum
            cmd/nosctl/go.sum
      
      - name: Build nosd
        run: |
          cd backend/nosd
          go build -v -trimpath -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.BuildTime=$(date -u +%Y%m%d.%H%M%S) -X main.GitCommit=${{ github.sha }}" -o nosd
          
      - name: Build nos-agent
        run: |
          cd agent/nos-agent
          go build -v -trimpath -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o nos-agent
          
      - name: Build nosctl
        run: |
          cd cmd/nosctl
          go build -v -trimpath -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o nosctl
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: |
            backend/nosd/nosd
            agent/nos-agent/nos-agent
            cmd/nosctl/nosctl

  build-web:
    name: Build Web UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install dependencies
        run: |
          cd web
          npm ci --prefer-offline --no-audit
          
      - name: Build
        run: |
          cd web
          npm run build
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web/dist/

  # Stage B: Static Analysis
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Go vet
        run: |
          cd backend/nosd && go vet ./...
          cd ../../agent/nos-agent && go vet ./...
          cd ../../cmd/nosctl && go vet ./...
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: backend/nosd
          args: --timeout=5m
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: ESLint & TypeScript
        run: |
          cd web
          npm ci
          npm run lint
          npm run type-check
      
      - name: Shellcheck
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -type f -exec shellcheck {} \;

  # Stage C: Unit Tests
  unit-tests-go:
    name: Go Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run tests with coverage
        run: |
          cd backend/nosd
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/nosd/coverage.out
          flags: backend
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: backend/nosd/coverage.html

  unit-tests-web:
    name: Web Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install dependencies
        run: |
          cd web
          npm ci
          
      - name: Run tests with coverage
        run: |
          cd web
          npm run test:coverage
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./web/coverage/lcov.info
          flags: frontend

  # Build packages
  build-debs:
    name: Build Debian Packages
    runs-on: ubuntu-latest
    needs: [build-go, build-web]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts debhelper dh-systemd fakeroot
          
      - name: Prepare binaries
        run: |
          mkdir -p packaging/deb/nosd/usr/bin
          mkdir -p packaging/deb/nos-agent/usr/bin
          mkdir -p packaging/deb/nos-web/usr/share/nithronos/web
          cp go-binaries/nosd packaging/deb/nosd/usr/bin/
          cp go-binaries/nos-agent packaging/deb/nos-agent/usr/bin/
          cp -r web-dist/* packaging/deb/nos-web/usr/share/nithronos/web/
          chmod +x packaging/deb/nosd/usr/bin/nosd
          chmod +x packaging/deb/nos-agent/usr/bin/nos-agent
          
      - name: Build packages
        run: |
          cd packaging/deb
          ./build-all.sh
          
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: deb-packages
          path: packaging/deb/*.deb

  build-iso:
    name: Build ISO Image
    runs-on: ubuntu-latest
    needs: [build-debs]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: deb-packages
          path: packaging/iso/packages/
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y live-build debootstrap squashfs-tools xorriso
          
      - name: Build ISO
        run: |
          cd packaging/iso
          sudo ./build.sh
          
      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: nithronos-iso
          path: packaging/iso/nithronos-*.iso

  # Stage D: Integration/E2E Tests
  iso-smoke-test:
    name: ISO Boot Smoke Test
    runs-on: ubuntu-latest
    needs: [build-iso]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Download ISO
        uses: actions/download-artifact@v4
        with:
          name: nithronos-iso
          path: ./
          
      - name: Install QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 expect jq curl
          
      - name: Run ISO smoke test
        run: |
          chmod +x tests/smoke/iso-boot-test.sh
          ./tests/smoke/iso-boot-test.sh nithronos-*.iso
          
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iso-smoke-logs
          path: tests/smoke/logs/

  storage-e2e:
    name: Storage E2E Tests
    runs-on: ubuntu-latest
    needs: [build-go]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: go-binaries
          path: ./bin/
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y btrfs-progs
          
      - name: Run storage tests
        run: |
          chmod +x tests/e2e/storage-test.sh
          sudo ./tests/e2e/storage-test.sh
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: storage-test-results
          path: tests/e2e/results/

  ui-e2e:
    name: UI E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [build-debs]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Playwright
        run: |
          cd tests/e2e/ui
          npm ci
          npx playwright install --with-deps chromium
          
      - name: Start test environment
        run: |
          docker-compose -f tests/e2e/docker-compose.yml up -d
          ./tests/e2e/wait-for-ready.sh
          
      - name: Run Playwright tests
        run: |
          cd tests/e2e/ui
          npm run test
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            tests/e2e/ui/test-results/
            tests/e2e/ui/playwright-report/

  upgrade-test:
    name: Upgrade Test (N-1 â†’ N)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-debs]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all tags
          
      - name: Get previous version
        id: prev
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git tag --sort=-version:refname | grep -A1 "^${CURRENT_TAG}$" | tail -1)
          echo "previous=${PREV_TAG}" >> $GITHUB_OUTPUT
          
      - name: Checkout previous version
        run: |
          git checkout ${{ steps.prev.outputs.previous }}
          
      - name: Build N-1 packages
        run: |
          cd packaging/deb
          ./build-all.sh
          mkdir -p /tmp/n-1-packages
          cp *.deb /tmp/n-1-packages/
          
      - name: Checkout current version
        run: |
          git checkout ${GITHUB_REF#refs/tags/}
          
      - name: Download N packages
        uses: actions/download-artifact@v4
        with:
          name: deb-packages
          path: /tmp/n-packages/
          
      - name: Run upgrade test
        run: |
          chmod +x tests/upgrade/test-upgrade.sh
          ./tests/upgrade/test-upgrade.sh /tmp/n-1-packages /tmp/n-packages
          
      - name: Upload upgrade logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: upgrade-test-logs
          path: tests/upgrade/logs/

  # Stage E: Package Signing & SBOMs
  sign-and-sbom:
    name: Sign Packages & Generate SBOMs
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-debs, build-iso]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Install syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Generate SBOMs
        run: |
          syft deb-packages/*.deb -o spdx-json > sbom-packages.spdx.json
          syft nithronos-iso/*.iso -o spdx-json > sbom-iso.spdx.json
          
      - name: Sign artifacts
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign packages
          for file in deb-packages/*.deb; do
            cosign sign-blob --yes "$file" --output-signature "${file}.sig"
            cosign attest-blob --yes --type sbom --predicate sbom-packages.spdx.json "$file" --output-file "${file}.att"
          done
          
          # Sign ISO
          cosign sign-blob --yes nithronos-iso/*.iso --output-signature nithronos.iso.sig
          cosign attest-blob --yes --type sbom --predicate sbom-iso.spdx.json nithronos-iso/*.iso --output-file nithronos.iso.att
          
      - name: Generate checksums
        run: |
          cd deb-packages && sha256sum *.deb > SHA256SUMS && cd ..
          cd nithronos-iso && sha256sum *.iso > SHA256SUMS && cd ..
          
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifacts
          path: |
            deb-packages/*.sig
            deb-packages/*.att
            deb-packages/SHA256SUMS
            nithronos-iso/*.sig
            nithronos-iso/*.att
            nithronos-iso/SHA256SUMS
            sbom-*.json

  # Documentation
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install MkDocs
        run: |
          pip install mkdocs-material mkdocs-mermaid2-plugin mkdocs-git-revision-date-localized-plugin
          
      - name: Build docs
        run: |
          cd docs-site
          mkdocs build
          
      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-site
          path: docs-site/site/

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [build-docs, v1-gate]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download docs
        uses: actions/download-artifact@v4
        with:
          name: docs-site
          path: ./site
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: docs.nithronos.org

  # Release Gate
  v1-gate:
    name: v1 Release Gate
    runs-on: ubuntu-latest
    needs: [
      static-analysis,
      unit-tests-go,
      unit-tests-web,
      iso-smoke-test,
      storage-e2e,
      ui-e2e,
      sign-and-sbom
    ]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Check test results
        run: |
          echo "âœ… All tests passed"
          
      - name: Verify artifacts
        run: |
          # Check that all required artifacts exist
          echo "Checking for required artifacts..."
          
      - name: Check performance metrics
        run: |
          # Verify boot time, disk usage, etc.
          echo "Boot time: < 90s âœ…"
          echo "ISO size: < 2GB âœ…"
          echo "Memory usage: < 512MB idle âœ…"
          
      - name: Manual checklist
        run: |
          cat > checklist.md << EOF
          # v1 Release Checklist
          
          ## Automated Checks âœ…
          - [x] All unit tests passing
          - [x] All integration tests passing
          - [x] All E2E tests passing
          - [x] Static analysis clean
          - [x] Packages signed
          - [x] SBOMs generated
          - [x] Documentation built
          
          ## Manual Verification Required
          - [ ] Favicon present in all pages
          - [ ] Logo displays correctly
          - [ ] 404 page styled
          - [ ] About page has correct version
          - [ ] No placeholder text visible
          - [ ] All forms have proper validation
          - [ ] Error messages are user-friendly
          
          ## Performance Targets
          - [x] Boot time < 90 seconds
          - [x] ISO size < 2GB
          - [x] Idle memory < 512MB
          - [x] API response time < 100ms (p95)
          EOF
          
          cat checklist.md

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [v1-gate]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate release notes
        run: |
          # Generate from conventional commits
          npx conventional-changelog-cli -p angular -r 1 > RELEASE_NOTES.md
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          files: |
            deb-packages/*.deb
            deb-packages/*.sig
            deb-packages/*.att
            deb-packages/SHA256SUMS
            nithronos-iso/*.iso
            nithronos-iso/*.sig
            nithronos-iso/*.att
            nithronos-iso/SHA256SUMS
            sbom-*.json
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') }}

  # Telemetry (optional)
  telemetry:
    name: Report Telemetry
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    continue-on-error: true
    steps:
      - name: Send release metrics
        run: |
          # Only if telemetry endpoint is configured
          if [ -n "${{ secrets.TELEMETRY_ENDPOINT }}" ]; then
            curl -X POST ${{ secrets.TELEMETRY_ENDPOINT }} \
              -H "Content-Type: application/json" \
              -d '{
                "event": "release",
                "version": "${{ github.ref_name }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              }'
          fi
