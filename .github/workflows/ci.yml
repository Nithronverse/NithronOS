name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
  release:
    types: [ published ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          check-latest: true
          cache: true
          cache-dependency-path: |
            backend/nosd/go.sum
            agent/nos-agent/go.sum
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install linters
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.60.3
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Go linters (backend)
        working-directory: backend/nosd
        run: |
          golangci-lint run ./...
          staticcheck ./...
          govulncheck ./...
      - name: Go linters (agent)
        working-directory: agent/nos-agent
        run: |
          golangci-lint run ./...
          staticcheck ./...
          govulncheck ./...
      - name: Web typecheck + audit
        working-directory: web
        run: |
          npm ci
          npm run typecheck
          npm audit --omit=dev --audit-level=high
      - name: Property test (TOTP window)
        run: |
          cd backend/nosd && go test ./pkg/auth -run TestTOTPWindowPlusMinusOne -v

  build:
    name: Build (backend, agent, web)
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify packaging runtime deps
        run: |
          chmod +x scripts/verify-runtime-deps.sh
          bash scripts/verify-runtime-deps.sh

      - name: Set up Go (with cache for both modules)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          check-latest: true
          cache: true
          cache-dependency-path: |
            backend/nosd/go.sum
            agent/nos-agent/go.sum

      - name: Set up Node (with npm cache for /web)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Normalize go.mod and tidy
        run: |
          sed -i 's/^go 1\.23\.0$/go 1.23/' backend/nosd/go.mod || true
          sed -i 's/^go 1\.23\.0$/go 1.23/' agent/nos-agent/go.mod || true
          (cd backend/nosd && go mod tidy)
          (cd agent/nos-agent && go mod tidy)

      - name: Build backend & agent
        run: |
          cd backend/nosd && CGO_ENABLED=0 go build ./... && cd -
          cd agent/nos-agent && CGO_ENABLED=0 go build ./... && cd -

      - name: Web install & build
        run: |
          cd web
          npm ci
          npm run build
          cd -

      - name: Upload web build (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: NithronOS - Web UI - ${{ github.event.release.tag_name || github.ref_name }}
          path: web/dist
          if-no-files-found: ignore

  test:
    name: Test (backend, agent, web)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go (with cache for both modules)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          check-latest: true
          cache: true
          cache-dependency-path: |
            backend/nosd/go.sum
            agent/nos-agent/go.sum

      - name: Set up Node (with npm cache for /web)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Test backend & agent
        run: |
          cd backend/nosd && go test ./... -v && cd -
          cd agent/nos-agent && go test ./... -v && cd -

      - name: Web tests (if configured)
        run: |
          cd web
          npm ci
          npm test -- --run || echo "no web tests configured"
          cd -

      - name: Go tests (incl. combined metrics)
        run: |
          set -euo pipefail
          if [ -d backend/nosd ]; then (cd backend/nosd && go test ./... -v); fi
          if [ -d agent/nos-agent ]; then (cd agent/nos-agent && go test ./... -v); else echo "agent module missing; skipping"; fi

      - name: Debug failing internal/server tests (verbose)
        if: ${{ failure() }}
        run: |
          echo "[ci] Re-running backend/nosd/internal/server with verbose output for diagnostics"
          cd backend/nosd
          go test -count=1 -v ./internal/server || true
      - name: Manual smoke (disabled)
        if: ${{ false }}
        run: echo "Manual smoke disabled by default"

  debs:
    name: Build Debian packages
    if: ${{ github.event_name == 'push' || (github.event_name == 'release' && github.event.action == 'published') }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout at commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Set up Go (with cache for both modules)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          check-latest: true
          cache: true
          cache-dependency-path: |
            backend/nosd/go.sum
            agent/nos-agent/go.sum

      - name: Set up Node (with npm cache for /web)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install Debian packaging toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y debhelper devscripts fakeroot build-essential

      - name: Build .deb packages
        run: |
          chmod +x packaging/build-all.sh
          bash packaging/build-all.sh

      - name: Upload .deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NithronOS - Debian Packages - ${{ github.event.release.tag_name || github.ref_name }}
          path: |
            dist/deb/*.deb
            dist/deb/*.changes
            dist/deb/*.buildinfo

  iso:
    name: Build ISO (amd64)
    if: ${{ github.event_name == 'push' || (github.event_name == 'release' && github.event.action == 'published') }}
    needs: debs
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: debian:bookworm
      options: --privileged --security-opt seccomp=unconfined --cap-add=SYS_ADMIN --tmpfs /run --tmpfs /run/lock --tmpfs /tmp
    steps:
      - name: Show container context
        run: |
          id -u; id -g
          cat /etc/os-release || true

      - name: Install ISO build dependencies (container root)
        run: |
          apt-get update
          apt-get install -y git live-build xorriso squashfs-tools cpio debootstrap genisoimage ca-certificates imagemagick

      - name: Checkout at commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Download .deb artifacts from this workflow
        uses: actions/download-artifact@v4
        with:
          name: NithronOS - Debian Packages - ${{ github.event.release.tag_name || github.ref_name }}
          path: dist/deb

      - name: Stage debs for ISO
        run: |
          mkdir -p packaging/iso/local-debs
          cp -v dist/deb/*.deb packaging/iso/local-debs/

      - name: Build ISO
        env:
          DEBIAN_FRONTEND: noninteractive
          ISO_TAG: ${{ github.event.release.tag_name || github.ref_name }}
          ISO_ARCH: amd64
        run: |
          chmod +x packaging/iso/build.sh
          bash packaging/iso/build.sh packaging/iso/local-debs

      - name: Generate checksums (ISO + DEBs)
        run: |
          mkdir -p dist/iso dist/deb
          shopt -s nullglob
          (cd dist/iso && ls -1 *.iso >/dev/null 2>&1 && sha256sum *.iso > SHA256SUMS || true)
          (cd dist/deb && ls -1 *.deb >/dev/null 2>&1 && sha256sum *.deb > SHA256SUMS || true)

      - name: "Debug: list built ISO"
        run: |
          ls -lah dist/iso || true

      - name: Upload ISO artifact (non-release)
        if: ${{ github.event_name != 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: NithronOS - amd64 - ${{ github.event.release.tag_name || github.ref_name }}
          path: |
            dist/iso/*.iso
            dist/iso/SHA256SUMS
          if-no-files-found: error
          retention-days: 7

      - name: Upload DEB artifacts (non-release)
        if: ${{ github.event_name != 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: NithronOS - Debian Packages - ${{ github.event.release.tag_name || github.ref_name }}
          path: |
            dist/deb/*.deb
            dist/deb/*.changes
            dist/deb/*.buildinfo
            dist/deb/SHA256SUMS

      - name: Upload release assets (ISO + DEBs + checksums)
        if: ${{ github.event_name == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/iso/*.iso
            dist/iso/SHA256SUMS
            dist/deb/*.deb
            dist/deb/*.changes
            dist/deb/*.buildinfo
            dist/deb/SHA256SUMS
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  smoke:
    name: "Smoke ISO (QEMU: serial)"
    if: ${{ false }}
    needs: iso
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout repo (for scripts)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Try download ISO artifact (stable name)
        id: dl_stable
        uses: actions/download-artifact@v4
        with:
          name: NithronOS - amd64 - ${{ github.event.release.tag_name || github.ref_name }}
          path: dist/iso
        continue-on-error: true

      - name: "Fallback: download by pattern (merge all)"
        if: ${{ steps.dl_stable.outcome == 'failure' }}
        uses: actions/download-artifact@v4
        with:
          pattern: NithronOS - * - ${{ github.event.release.tag_name || github.ref_name }}
          merge-multiple: true
          path: dist/iso
        continue-on-error: true

      - name: Install QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86

      - name: Locate ISO (and list artifacts on failure)
        id: findiso
        run: |
          set -e
          echo "[ci] Listing dist/iso:"
          ls -lah dist/iso || true
          ISO_PATH="$(ls -1 dist/iso/*.iso 2>/dev/null || true)"
          if [ -z "$ISO_PATH" ]; then
            echo "::error::No ISO found in dist/iso after download."
            echo "[ci] Searching workspace for *.iso just in case:"
            find . -type f -name '*.iso' -maxdepth 6 -printf '%p\n' || true
            exit 1
          fi
          echo "ISO_PATH=$ISO_PATH" >> "$GITHUB_OUTPUT"
          echo "[ci] Using $ISO_PATH"

      - name: Run smoke test (serial console)
        run: |
          chmod +x scripts/qemu-smoke.sh
          sudo -E bash scripts/qemu-smoke.sh "${{ steps.findiso.outputs.ISO_PATH }}"

      - name: Upload serial and qemu logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs-${{ github.sha }}
          path: |
            /tmp/nos-serial.log
            /tmp/qemu.log
          if-no-files-found: warn
