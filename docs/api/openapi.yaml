openapi: 3.0.3
info:
  title: NithronOS API
  version: 0.1.0
servers:
  - url: /api/v1
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
  /setup/state:
    get:
      summary: Setup state
      responses:
        '200':
          description: Initial setup state
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstBoot: { type: boolean }
                  otpRequired: { type: boolean }
        '410':
          description: Setup already completed
  /setup/verify-otp:
    post:
      summary: Verify first-boot OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
      responses:
        '200':
          description: OTP verified; returns short-lived setup token
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  token: { type: string }
        '401': { $ref: '#/components/responses/Error' }
        '429': { $ref: '#/components/responses/Error' }
  /setup/create-admin:
    post:
      summary: Create initial admin user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string, format: password }
                enable_totp: { type: boolean }
      responses:
        '200': { description: Created }
        '401': { $ref: '#/components/responses/Error' }
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string, format: password }
                code: { type: string, description: TOTP code }
      responses:
        '200': { description: Authenticated; sets cookies }
        '401': { $ref: '#/components/responses/Error' }
        '429': { $ref: '#/components/responses/Error' }
  /auth/logout:
    post:
      summary: Logout
      responses:
        '204': { description: No content }
  /auth/me:
    get:
      summary: Current user info
      responses:
        '200': { description: OK }
        '401': { $ref: '#/components/responses/Error' }
components:
  schemas:
    ErrorEnvelope:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            retryAfterSec: { type: integer }
  responses:
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'


