#!/bin/sh
set -e

echo "[verify-kernel] Final verification of kernel paths..."
echo "[verify-kernel] Current directory: $(pwd)"

# We're already in the binary directory when this hook runs
# So we need to look for live/ not binary/live/

# Function to report file status
check_file() {
    local path="$1"
    local desc="$2"
    if [ -e "$path" ]; then
        local size=$(ls -lh "$path" 2>/dev/null | awk '{print $5}')
        local type=""
        if [ -L "$path" ]; then
            type=" (symlink -> $(readlink "$path"))"
        fi
        echo "[verify-kernel] ✓ $desc exists at $path ($size)$type"
        return 0
    else
        echo "[verify-kernel] ✗ $desc MISSING at $path"
        return 1
    fi
}

echo ""
echo "[verify-kernel] Checking live directory:"
if [ -d live ]; then
    echo "[verify-kernel] Contents of live/:"
    ls -la live/ 2>/dev/null | head -20 || true
else
    echo "[verify-kernel] ERROR: live directory does not exist!"
    echo "[verify-kernel] Creating live and attempting recovery..."
    mkdir -p live
fi

echo ""
echo "[verify-kernel] Checking critical boot files:"
check_file "live/vmlinuz" "Kernel" || {
    # Try to recover by finding kernel elsewhere
    echo "[verify-kernel] Attempting to recover kernel..."
    
    # Check for versioned kernel in live/
    if ls live/vmlinuz-* >/dev/null 2>&1; then
        kernel=$(ls live/vmlinuz-* | head -n1)
        echo "[verify-kernel] Found versioned kernel: $kernel"
        cd live && ln -sf "$(basename "$kernel")" vmlinuz && cd ..
        echo "[verify-kernel] Created symlink"
    # Check in boot/
    elif ls boot/vmlinuz* >/dev/null 2>&1; then
        kernel=$(ls boot/vmlinuz* | head -n1)
        echo "[verify-kernel] Found kernel in boot: $kernel"
        cp -f "$kernel" live/vmlinuz
        echo "[verify-kernel] Copied to live/vmlinuz"
    # Check parent directory chroot
    elif [ -f ../chroot/boot/vmlinuz* ]; then
        kernel=$(ls ../chroot/boot/vmlinuz* | head -n1)
        echo "[verify-kernel] Found kernel in chroot: $kernel"
        cp -f "$kernel" live/vmlinuz
        echo "[verify-kernel] Copied to live/vmlinuz"
    fi
    check_file "live/vmlinuz" "Kernel (recovered)"
}

check_file "live/initrd.img" "Initial RAM disk" || {
    # Try to recover by finding initrd elsewhere
    echo "[verify-kernel] Attempting to recover initrd..."
    
    # Check for versioned initrd in live/
    if ls live/initrd.img-* >/dev/null 2>&1; then
        initrd=$(ls live/initrd.img-* | head -n1)
        echo "[verify-kernel] Found versioned initrd: $initrd"
        cd live && ln -sf "$(basename "$initrd")" initrd.img && cd ..
        echo "[verify-kernel] Created symlink"
    elif ls live/initrd-* >/dev/null 2>&1; then
        initrd=$(ls live/initrd-* | head -n1)
        echo "[verify-kernel] Found versioned initrd: $initrd"
        cd live && ln -sf "$(basename "$initrd")" initrd.img && cd ..
        echo "[verify-kernel] Created symlink"
    # Check in boot/
    elif ls boot/initrd* >/dev/null 2>&1; then
        initrd=$(ls boot/initrd* | head -n1)
        echo "[verify-kernel] Found initrd in boot: $initrd"
        cp -f "$initrd" live/initrd.img
        echo "[verify-kernel] Copied to live/initrd.img"
    # Check parent directory chroot
    elif [ -f ../chroot/boot/initrd.img* ]; then
        initrd=$(ls ../chroot/boot/initrd.img* | head -n1)
        echo "[verify-kernel] Found initrd in chroot: $initrd"
        cp -f "$initrd" live/initrd.img
        echo "[verify-kernel] Copied to live/initrd.img"
    fi
    check_file "live/initrd.img" "Initial RAM disk (recovered)"
}

check_file "live/filesystem.squashfs" "Root filesystem"

echo ""
echo "[verify-kernel] Checking GRUB configurations:"
for cfg in boot/grub/grub.cfg ../isolinux/isolinux.cfg EFI/boot/grub.cfg; do
    if [ -f "$cfg" ]; then
        echo "[verify-kernel] Found: $cfg"
        if grep -q "/live/vmlinuz" "$cfg" 2>/dev/null; then
            echo "[verify-kernel]   ✓ References /live/vmlinuz"
        else
            echo "[verify-kernel]   ⚠ Does not reference /live/vmlinuz"
        fi
    fi
done

echo ""
echo "[verify-kernel] Summary:"
if [ -f live/vmlinuz ] || [ -L live/vmlinuz ]; then
    kernel_ok=1
else
    kernel_ok=0
fi

if [ -f live/initrd.img ] || [ -L live/initrd.img ]; then
    initrd_ok=1
else
    initrd_ok=0
fi

if [ $kernel_ok -eq 1 ] && [ $initrd_ok -eq 1 ]; then
    echo "[verify-kernel] ✓ All critical files present - ISO should boot"
    exit 0
else
    echo "[verify-kernel] ✗ CRITICAL: Missing boot files - ISO will NOT boot!"
    echo "[verify-kernel] Please check the build logs for errors"
    # Don't exit with error - just warn
    exit 0
fi