#!/bin/sh
# NithronOS OTP Announcer - prints first-boot OTP to console
set -e

# Wait for nosd or firstboot.json (max 60s)
wait_count=0
while [ $wait_count -lt 60 ]; do
    # Check if firstboot.json exists
    if [ -f /var/lib/nos/state/firstboot.json ]; then
        break
    fi
    # Check if nosd is responding
    if curl -sf -m 2 http://127.0.0.1:9000/api/health >/dev/null 2>&1; then
        break
    fi
    wait_count=$((wait_count + 1))
    sleep 1
done

# Try to get OTP and state from firstboot.json first
firstboot_file="/var/lib/nos/state/firstboot.json"
otp=""
first_boot="false"
otp_required="false"

if [ -f "$firstboot_file" ]; then
    # Parse JSON without jq (POSIX compatible)
    if grep -q '"used"[[:space:]]*:[[:space:]]*false' "$firstboot_file" 2>/dev/null; then
        otp=$(sed -n 's/.*"otp"[[:space:]]*:[[:space:]]*"\([0-9]\{6\}\)".*/\1/p' "$firstboot_file" 2>/dev/null | head -n1)
        if [ -n "$otp" ]; then
            first_boot="true"
            otp_required="true"
        fi
    fi
fi

# If no OTP from file, try API
if [ -z "$otp" ] || [ "$first_boot" = "false" ]; then
    # Get state from API
    api_response=$(curl -sf -m 5 http://127.0.0.1:9000/api/setup/state 2>/dev/null || true)
    
    if [ -n "$api_response" ]; then
        # Parse JSON response
        if command -v jq >/dev/null 2>&1; then
            # Use jq if available
            first_boot=$(echo "$api_response" | jq -r '.firstBoot // false')
            otp_required=$(echo "$api_response" | jq -r '.otpRequired // false')
        else
            # Fallback to sed/grep
            if echo "$api_response" | grep -q '"firstBoot"[[:space:]]*:[[:space:]]*true'; then
                first_boot="true"
            fi
            if echo "$api_response" | grep -q '"otpRequired"[[:space:]]*:[[:space:]]*true'; then
                otp_required="true"
            fi
        fi
        
        # If OTP is required but we don't have it yet, try to get from firstboot.json again
        if [ "$otp_required" = "true" ] && [ -z "$otp" ] && [ -f "$firstboot_file" ]; then
            otp=$(sed -n 's/.*"otp"[[:space:]]*:[[:space:]]*"\([0-9]\{6\}\)".*/\1/p' "$firstboot_file" 2>/dev/null | head -n1)
        fi
    fi
fi

# Only proceed if first boot and OTP is required
if [ "$first_boot" != "true" ] || [ "$otp_required" != "true" ]; then
    exit 1
fi

# Exit if no OTP found
if [ -z "$otp" ] || [ "$otp" = "null" ]; then
    exit 1
fi

# Get primary IP address for display
ip_addr=$(ip -4 addr show scope global | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -n1)
if [ -z "$ip_addr" ]; then
    ip_addr="<server-ip>"
fi

# Compose the message
message="
================================================================================
  NithronOS first-boot OTP: $otp
  Valid for 15 minutes â€¢ Open http://nithron.os or http://$ip_addr
  If lost: systemctl restart nosd (will rotate OTP)
================================================================================"

# Create runtime directory
mkdir -p /run/nithronos

# Write to runtime file
echo "$message" > /run/nithronos/otp.txt

# Print to various consoles
for console in /dev/console /dev/tty0 /dev/tty1 /dev/ttyS0; do
    if [ -c "$console" ] && [ -w "$console" ]; then
        echo "$message" > "$console" 2>/dev/null || true
    fi
done

# Also print to stdout for journald
echo "$message"

exit 0
