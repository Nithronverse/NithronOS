#!/bin/bash
# NithronOS Simple Installer
# This script installs NithronOS from the live system to a target disk

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# NithronOS ASCII art
echo -e "${BLUE}"
cat << "EOF"
     _   _ _ _   _                   ___  ____  
    | \ | (_) |_| |__  _ __ ___  _ __/ _ \/ ___| 
    |  \| | | __| '_ \| '__/ _ \| '_ \ | | \___ \
    | |\  | | |_| | | | | | (_) | | | |_| |___) |
    |_| \_|_|\__|_| |_|_|  \___/|_| |_\___/____/ 
                                                  
           Simple Installation Wizard
EOF
echo -e "${NC}"

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}Error: Please run as root (use sudo)${NC}"
    exit 1
fi

echo "Welcome to NithronOS Installer!"
echo "================================"
echo ""
echo "This wizard will help you install NithronOS to your system."
echo ""

# List available disks
echo -e "${YELLOW}Available disks:${NC}"
lsblk -d -o NAME,SIZE,MODEL | grep -v loop | grep -v sr
echo ""

# Get target disk
read -p "Enter the target disk (e.g., sda, nvme0n1): /dev/" TARGET_DISK
TARGET_DISK="/dev/${TARGET_DISK}"

if [ ! -b "$TARGET_DISK" ]; then
    echo -e "${RED}Error: $TARGET_DISK is not a valid block device${NC}"
    exit 1
fi

echo ""
echo -e "${RED}WARNING: This will ERASE ALL DATA on $TARGET_DISK${NC}"
read -p "Are you sure you want to continue? (yes/no): " CONFIRM

if [ "$CONFIRM" != "yes" ]; then
    echo "Installation cancelled."
    exit 0
fi

echo ""
echo -e "${GREEN}Starting installation...${NC}"

# Partition the disk
echo "Creating partitions..."
parted -s $TARGET_DISK mklabel gpt
parted -s $TARGET_DISK mkpart ESP fat32 1MiB 512MiB
parted -s $TARGET_DISK set 1 esp on
parted -s $TARGET_DISK mkpart primary btrfs 512MiB 100%

# Format partitions
echo "Formatting partitions..."
if [[ $TARGET_DISK == *"nvme"* ]]; then
    EFI_PART="${TARGET_DISK}p1"
    ROOT_PART="${TARGET_DISK}p2"
else
    EFI_PART="${TARGET_DISK}1"
    ROOT_PART="${TARGET_DISK}2"
fi

mkfs.fat -F32 $EFI_PART
mkfs.btrfs -f -L NithronOS $ROOT_PART

# Mount partitions
echo "Mounting partitions..."
mount $ROOT_PART /mnt
mkdir -p /mnt/boot/efi
mount $EFI_PART /mnt/boot/efi

# Create Btrfs subvolumes
echo "Creating Btrfs subvolumes..."
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@var
btrfs subvolume create /mnt/@snapshots

# Remount with subvolumes
umount /mnt/boot/efi
umount /mnt
mount -o subvol=@,compress=zstd:3,noatime $ROOT_PART /mnt
mkdir -p /mnt/{home,var,boot/efi,.snapshots}
mount -o subvol=@home,compress=zstd:3,noatime $ROOT_PART /mnt/home
mount -o subvol=@var,compress=zstd:3,noatime $ROOT_PART /mnt/var
mount -o subvol=@snapshots,compress=zstd:3,noatime $ROOT_PART /mnt/.snapshots
mount $EFI_PART /mnt/boot/efi

# Copy system files
echo "Copying system files (this may take a while)..."
rsync -axHAWXS --numeric-ids --info=progress2 \
    --exclude=/proc \
    --exclude=/sys \
    --exclude=/dev \
    --exclude=/run \
    --exclude=/mnt \
    --exclude=/media \
    --exclude=/tmp \
    --exclude=/live \
    --exclude=/lib/live \
    / /mnt/

# Create excluded directories
mkdir -p /mnt/{proc,sys,dev,run,mnt,media,tmp}

# Install bootloader
echo "Installing bootloader..."
mount --bind /dev /mnt/dev
mount --bind /proc /mnt/proc
mount --bind /sys /mnt/sys
mount --bind /run /mnt/run

# Generate fstab
echo "Generating fstab..."
cat > /mnt/etc/fstab << EOF
# /etc/fstab: static file system information.
UUID=$(blkid -s UUID -o value $ROOT_PART) /              btrfs   subvol=@,compress=zstd:3,noatime 0 1
UUID=$(blkid -s UUID -o value $ROOT_PART) /home          btrfs   subvol=@home,compress=zstd:3,noatime 0 2
UUID=$(blkid -s UUID -o value $ROOT_PART) /var           btrfs   subvol=@var,compress=zstd:3,noatime 0 2
UUID=$(blkid -s UUID -o value $ROOT_PART) /.snapshots    btrfs   subvol=@snapshots,compress=zstd:3,noatime 0 2
UUID=$(blkid -s UUID -o value $EFI_PART)  /boot/efi      vfat    umask=0077 0 2
EOF

# Install GRUB
chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=NithronOS
chroot /mnt update-grub

# Set hostname
echo "nithronos" > /mnt/etc/hostname

# Configure network
cat > /mnt/etc/network/interfaces << EOF
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug eth0
iface eth0 inet dhcp
EOF

# Enable services
echo "Configuring services..."
chroot /mnt systemctl enable ssh
chroot /mnt systemctl enable nosd || true
chroot /mnt systemctl enable nos-agent || true
chroot /mnt systemctl enable caddy || true
chroot /mnt systemctl enable docker || true

# Clean up
umount -R /mnt

echo ""
echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}Installation complete!${NC}"
echo -e "${GREEN}================================${NC}"
echo ""
echo "Please remove the installation media and reboot."
echo "After reboot, navigate to http://your-server-ip to complete setup."
echo ""
read -p "Press Enter to reboot..." 
reboot
