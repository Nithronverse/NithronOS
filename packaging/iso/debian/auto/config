#!/bin/sh
# NithronOS ISO Build Configuration

set -e

# Base configuration
lb config noauto \
    --mode debian \
    --distribution bookworm \
    --architectures amd64 \
    --linux-flavours amd64 \
    --binary-images iso-hybrid \
    --debian-installer true \
    --debian-installer-gui false \
    --debian-installer-distribution bookworm \
    --apt-indices false \
    --apt-recommends true \
    --cache true \
    --cache-indices true \
    --cache-packages true \
    --debconf-frontend noninteractive \
    --debootstrap-options "--variant=minbase" \
    --iso-application "NithronOS" \
    --iso-publisher "NithronOS Project" \
    --iso-volume "NithronOS $(date +%Y%m%d)" \
    --memtest none \
    --win32-loader false \
    --loadlin false \
    --bootappend-live "boot=live components quiet splash" \
    --bootappend-live-failsafe "boot=live components memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash vga=normal" \
    --bootappend-install "vga=788 auto=true priority=critical preseed/file=/cdrom/preseed.cfg locale=en_US.UTF-8 keymap=us hostname=nithronos domain=local quiet" \
    "${@}"

# Ensure installer is included
mkdir -p config/packages.chroot
mkdir -p config/includes.installer
mkdir -p config/includes.binary

# Add security and updates
echo "deb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware" > config/archives/security.list.chroot
echo "deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware" > config/archives/updates.list.chroot

# Add Docker repository
echo "deb [arch=amd64] https://download.docker.com/linux/debian bookworm stable" > config/archives/docker.list.chroot
curl -fsSL https://download.docker.com/linux/debian/gpg > config/archives/docker.key.chroot

# Package lists
cat > config/package-lists/nithronos-base.list.chroot << EOF
# Base system
sudo
vim
htop
curl
wget
git
tmux
screen
rsync
tree

# Storage tools
btrfs-progs
zfs-dkms
zfsutils-linux
mdadm
lvm2
cryptsetup
parted
gdisk
e2fsprogs
xfsprogs

# Hardware tools
smartmontools
hdparm
nvme-cli
lshw
dmidecode
pciutils
usbutils

# Network tools
net-tools
dnsutils
iperf3
nmap
tcpdump
bridge-utils
vlan
ethtool
iproute2
iputils-ping
traceroute
mtr
netcat-openbsd

# System services
systemd-timesyncd
chrony
openssh-server
openssh-client

# Security
ufw
fail2ban
aide
rkhunter
chkrootkit

# Development tools
build-essential
linux-headers-amd64
dkms
python3
python3-pip
nodejs
npm
golang

# Monitoring
sysstat
iotop
iftop
nethogs

# Archive tools
zip
unzip
p7zip-full
tar
gzip
bzip2
xz-utils

# File systems
nfs-common
cifs-utils
samba
smbclient

# Container runtime
docker-ce
docker-ce-cli
containerd.io
docker-compose-plugin

# Web server
caddy
nginx
apache2-utils

# Database tools
sqlite3
postgresql-client
mariadb-client

# Backup tools
borgbackup
restic
rclone
duplicity

# Virtualization support
qemu-guest-agent
open-vm-tools
cloud-init

# Live system tools
live-boot
live-config
live-config-systemd
EOF

# Installer packages
cat > config/package-lists/installer.list.binary << EOF
grub-efi-amd64-signed
shim-signed
grub-pc-bin
grub-efi-amd64-bin
efibootmgr
os-prober
EOF

# Create includes.installer directory for d-i customization
mkdir -p config/includes.installer

echo "Configuration complete. Run 'lb build' to build the ISO."