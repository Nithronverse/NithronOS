openapi: 3.0.3
info:
  title: NithronOS API
  version: 0.1.0
  description: API for nOS backend
servers:
  - url: http://127.0.0.1:9000
paths:
  /api/shares:
    get:
      summary: List network shares
      tags: [shares]
      responses:
        '200':
          description: List of shares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Share'
    post:
      summary: Create a new share
      tags: [shares]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShareRequest'
      responses:
        '201':
          description: Share created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Share'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/shares/{name}:
    patch:
      summary: Update a share
      tags: [shares]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShareRequest'
      responses:
        '200':
          description: Share updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Share'
        '404':
          description: Share not found
    delete:
      summary: Delete a share
      tags: [shares]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Share deleted
        '404':
          description: Share not found
  
  /api/shares/{name}/test:
    post:
      summary: Test share configuration (dry-run)
      tags: [shares]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  type: object
      responses:
        '200':
          description: Test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestShareResponse'
  
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /api/disks:
    get:
      summary: List disks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  disks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Disk'
                required: [disks]
  /api/pools:
    get:
      summary: List storage pools
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
  /api/pools/roots:
    get:
      summary: List allowed pool roots (mountpoints)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolsRoots'
  /api/pools/plan-create:
    post:
      summary: Plan Btrfs pool creation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolCreateReq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/pools/candidates:
    get:
      summary: List importable pool candidates
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
  /api/pools/import:
    post:
      summary: Import (mount) a pool by device or UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_or_uuid: { type: string }
              required: [device_or_uuid]
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/pools/create:
    post:
      summary: Create Btrfs pool
      parameters:
        - in: header
          name: Confirm
          schema: { type: string }
          required: true
          description: must be "yes" for destructive operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolCreateReq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: Precondition Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/pools/{id}/snapshots:
    get:
      summary: List snapshots
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
    post:
      summary: Create snapshot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subvol: { type: string }
                name: { type: string }
              required: [subvol]
      responses:
        '200':
          description: OK
  /api/smb/users:
    get:
      summary: List SMB users (proxy)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringArray'
    post:
      summary: Create SMB user (proxy)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmbUserCreate'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/apps:
    get:
      summary: App catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
  /api/remote/status:
    get:
      summary: Remote access status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteStatus'
  /api/support/bundle:
    get:
      summary: Download support bundle
      responses:
        '200':
          description: Tarball of logs and diagnostics
          content:
            application/gzip:
              schema:
                type: string
                format: binary
  /api/updates/apply:
    post:
      summary: Apply updates, optionally snapshotting targets before
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                packages:
                  type: array
                  items: { type: string }
                snapshot:
                  type: boolean
                confirm:
                  type: string
              required: [confirm]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  tx_id: { type: string }
                  snapshots_count: { type: integer }
                  updates_count: { type: integer }
                required: [ok, tx_id]
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/updates/check:
    get:
      summary: Check for available updates and list snapshot roots
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    type: object
                    additionalProperties: true
                  snapshot_roots:
                    type: array
                    items: { type: string }
                required: [plan, snapshot_roots]
  /api/updates/rollback:
    post:
      summary: Roll back a prior updates transaction using its snapshots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tx_id: { type: string }
                confirm: { type: string }
              required: [tx_id, confirm]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                required: [ok]
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/firewall/status:
    get:
      summary: Firewall status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallStatus'
  /api/firewall/plan:
    post:
      summary: Plan firewall rules for a mode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode: { type: string, enum: [lan-only, vpn-only, tunnel, direct] }
              required: [mode]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rules: { type: string }
                required: [rules]
  /api/firewall/apply:
    post:
      summary: Apply firewall rules for a mode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode: { type: string, enum: [lan-only, vpn-only, tunnel, direct] }
                twoFactorToken: { type: string, nullable: true }
              required: [mode]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                required: [ok]
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/firewall/rollback:
    post:
      summary: Rollback last firewall change
      responses:
        '200':
          description: OK
components:
  schemas:
    StringArray:
      type: array
      items: { type: string }
    
    Share:
      type: object
      properties:
        name:
          type: string
          pattern: '^[a-z0-9][a-z0-9-_]{1,31}$'
        path:
          type: string
        smb:
          $ref: '#/components/schemas/SMBConfig'
        nfs:
          $ref: '#/components/schemas/NFSConfig'
        owners:
          type: array
          items:
            type: string
            pattern: '^(user|group):[a-z0-9][a-z0-9-_]{0,31}$'
        readers:
          type: array
          items:
            type: string
            pattern: '^(user|group):[a-z0-9][a-z0-9-_]{0,31}$'
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [name, path, created_at, updated_at]
    
    SMBConfig:
      type: object
      properties:
        enabled:
          type: boolean
        guest:
          type: boolean
        time_machine:
          type: boolean
        recycle:
          $ref: '#/components/schemas/RecycleConfig'
      required: [enabled]
    
    RecycleConfig:
      type: object
      properties:
        enabled:
          type: boolean
        directory:
          type: string
          default: '.recycle'
      required: [enabled]
    
    NFSConfig:
      type: object
      properties:
        enabled:
          type: boolean
        networks:
          type: array
          items:
            type: string
            pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$'
        read_only:
          type: boolean
      required: [enabled]
    
    CreateShareRequest:
      type: object
      properties:
        name:
          type: string
          pattern: '^[a-z0-9][a-z0-9-_]{1,31}$'
        smb:
          $ref: '#/components/schemas/SMBConfig'
        nfs:
          $ref: '#/components/schemas/NFSConfig'
        owners:
          type: array
          items:
            type: string
        readers:
          type: array
          items:
            type: string
        description:
          type: string
      required: [name]
    
    UpdateShareRequest:
      type: object
      properties:
        smb:
          $ref: '#/components/schemas/SMBConfig'
        nfs:
          $ref: '#/components/schemas/NFSConfig'
        owners:
          type: array
          items:
            type: string
        readers:
          type: array
          items:
            type: string
        description:
          type: string
    
    TestShareResponse:
      type: object
      properties:
        valid:
          type: boolean
        errors:
          type: array
          items:
            type: string
      required: [valid]
    SmbUserCreate:
      type: object
      properties:
        username: { type: string }
        password: { type: string, nullable: true }
      required: [username]
    Error:
      type: object
      properties:
        error:
          type: string
      required: [error]
    Health:
      type: object
      properties:
        ok:
          type: boolean
        version:
          type: string
      required: [ok, version]
    Disk:
      type: object
      properties:
        name:
          type: string
        kname:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        size:
          type: integer
          format: int64
        type:
          type: string
        rota:
          type: boolean
          nullable: true
        tran:
          type: string
          nullable: true
        vendor:
          type: string
          nullable: true
        model:
          type: string
          nullable: true
        serial:
          type: string
          nullable: true
        mountpoint:
          nullable: true
        fstype:
          type: string
          nullable: true
        smart:
          $ref: '#/components/schemas/SmartSummary'
      required: [name, size, type]
    SmartSummary:
      type: object
      properties:
        healthy:
          type: boolean
          nullable: true
        temp_c:
          type: integer
          nullable: true
        power_on_hours:
          type: integer
          nullable: true
    Pool:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        uuid:
          type: string
        devices:
          type: array
          items: { type: string }
        size:
          type: integer
          format: int64
        used:
          type: integer
          format: int64
        free:
          type: integer
          format: int64
        raid:
          type: string
    Snapshot:
      type: object
      properties:
        path: { type: string }
        name: { type: string }
        readonly: { type: boolean }
    PoolCreateReq:
      type: object
      properties:
        label: { type: string }
        devices:
          type: array
          items: { type: string }
        raid: { type: string, enum: [single, raid1, raid10] }
      required: [label, devices, raid]

    App:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [installed, not_installed, updating]
      required: [id, status]
    RemoteStatus:
      type: object
      properties:
        mode:
          type: string
          enum: [lan-only, vpn-only, tunnel, direct]
        https:
          type: boolean
      required: [mode, https]
    FirewallStatus:
      type: object
      properties:
        mode: { type: string, enum: [lan-only, vpn-only, tunnel, direct] }
        nft_present: { type: boolean }
        ufw_present: { type: boolean }
        firewalld_present: { type: boolean }
        last_applied_at: { type: string, nullable: true }
      required: [mode, nft_present, ufw_present, firewalld_present]
    PoolsRoots:
      type: object
      properties:
        roots:
          type: array
          items: { type: string }
      required: [roots]



