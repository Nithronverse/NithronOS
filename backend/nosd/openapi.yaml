openapi: 3.0.3
info:
  title: NithronOS API
  version: 0.1.0
  description: API for nOS backend
servers:
  - url: http://127.0.0.1:9000
paths:
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /api/disks:
    get:
      summary: List disks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  disks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Disk'
                required: [disks]
  /api/pools:
    get:
      summary: List storage pools
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
  /api/pools/plan-create:
    post:
      summary: Plan Btrfs pool creation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolCreateReq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/pools/create:
    post:
      summary: Create Btrfs pool
      parameters:
        - in: header
          name: Confirm
          schema: { type: string }
          required: true
          description: must be "yes" for destructive operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolCreateReq'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /api/pools/{id}/snapshots:
    get:
      summary: List snapshots
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
    post:
      summary: Create snapshot
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subvol: { type: string }
                name: { type: string }
              required: [subvol]
      responses:
        '200':
          description: OK
  /api/shares:
    get:
      summary: List shares
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Share'
    post:
      summary: Create share
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Share'
      responses:
        '200':
          description: OK
  /api/shares/{id}:
    delete:
      summary: Delete share
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
  /api/apps:
    get:
      summary: App catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
  /api/remote/status:
    get:
      summary: Remote access status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteStatus'
  /api/support/bundle:
    get:
      summary: Download support bundle
      responses:
        '200':
          description: Tarball of logs and diagnostics
          content:
            application/gzip:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/firewall/status:
    get:
      summary: Firewall status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallStatus'
  /api/firewall/plan:
    post:
      summary: Plan firewall rules for a mode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode: { type: string, enum: [lan-only, vpn-only, tunnel, direct] }
              required: [mode]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rules: { type: string }
                required: [rules]
  /api/firewall/apply:
    post:
      summary: Apply firewall rules for a mode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode: { type: string, enum: [lan-only, vpn-only, tunnel, direct] }
                twoFactorToken: { type: string, nullable: true }
              required: [mode]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                required: [ok]
        '409':
          description: Conflict
  /api/firewall/rollback:
    post:
      summary: Rollback last firewall change
      responses:
        '200':
          description: OK
components:
  schemas:
    Health:
      type: object
      properties:
        ok:
          type: boolean
        version:
          type: string
      required: [ok, version]
    Disk:
      type: object
      properties:
        name:
          type: string
        kname:
          type: string
          nullable: true
        path:
          type: string
          nullable: true
        size:
          type: integer
          format: int64
        type:
          type: string
        rota:
          type: boolean
          nullable: true
        tran:
          type: string
          nullable: true
        vendor:
          type: string
          nullable: true
        model:
          type: string
          nullable: true
        serial:
          type: string
          nullable: true
        mountpoint:
          nullable: true
        fstype:
          type: string
          nullable: true
        smart:
          $ref: '#/components/schemas/SmartSummary'
      required: [name, size, type]
    SmartSummary:
      type: object
      properties:
        healthy:
          type: boolean
          nullable: true
        temp_c:
          type: integer
          nullable: true
        power_on_hours:
          type: integer
          nullable: true
    Pool:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        uuid:
          type: string
        devices:
          type: array
          items: { type: string }
        size:
          type: integer
          format: int64
        used:
          type: integer
          format: int64
        free:
          type: integer
          format: int64
        raid:
          type: string
    Snapshot:
      type: object
      properties:
        path: { type: string }
        name: { type: string }
        readonly: { type: boolean }
    PoolCreateReq:
      type: object
      properties:
        label: { type: string }
        devices:
          type: array
          items: { type: string }
        raid: { type: string, enum: [single, raid1, raid10] }
      required: [label, devices, raid]
    Share:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [smb, nfs]
        path:
          type: string
        name:
          type: string
        ro:
          type: boolean
        users:
          type: array
          items: { type: string }
      required: [type, path, name]
    App:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [installed, not_installed, updating]
      required: [id, status]
    RemoteStatus:
      type: object
      properties:
        mode:
          type: string
          enum: [lan-only, vpn-only, tunnel, direct]
        https:
          type: boolean
      required: [mode, https]
    FirewallStatus:
      type: object
      properties:
        mode: { type: string, enum: [lan-only, vpn-only, tunnel, direct] }
        nft_present: { type: boolean }
        ufw_present: { type: boolean }
        firewalld_present: { type: boolean }
        last_applied_at: { type: string, nullable: true }
      required: [mode, nft_present, ufw_present, firewalld_present]



