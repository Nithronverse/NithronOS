package shares

import "testing"

func TestSmbFragment_RW_NoUsers(t *testing.T) {
	got, err := SmbFragment("media", "/srv/pool/media", false, nil)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	want := "# Generated by NithronOS — DO NOT EDIT\n" +
		"[media]\n" +
		"path = /srv/pool/media\n" +
		"read only = no\n" +
		"browseable = yes\n" +
		"valid users = \n"
	if got != want {
		t.Fatalf("mismatch\nwant:\n%s\n---\ngot:\n%s", want, got)
	}
}

func TestSmbFragment_RO_WithUsers(t *testing.T) {
	got, err := SmbFragment("backups", "/srv/pool/backups", true, []string{"alice", "bob"})
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	want := "# Generated by NithronOS — DO NOT EDIT\n" +
		"[backups]\n" +
		"path = /srv/pool/backups\n" +
		"read only = yes\n" +
		"browseable = yes\n" +
		"valid users = alice,bob\n"
	if got != want {
		t.Fatalf("mismatch\nwant:\n%s\n---\ngot:\n%s", want, got)
	}
}

func TestNfsLine_RO_RW(t *testing.T) {
	gotRW, err := NfsLine("/srv/pool/media", false)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	if gotRW != "/srv/pool/media  *(rw,sync,no_subtree_check,root_squash)" {
		t.Fatalf("unexpected rw line: %s", gotRW)
	}
	gotRO, err := NfsLine("/srv/pool/media", true)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	if gotRO != "/srv/pool/media  *(ro,sync,no_subtree_check,root_squash)" {
		t.Fatalf("unexpected ro line: %s", gotRO)
	}
}
