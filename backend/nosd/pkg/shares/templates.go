package shares

import (
	"errors"
	"strings"
)

var (
	errEmptyName = errors.New("empty share name")
	errEmptyPath = errors.New("empty path")
)

// SmbFragment builds a minimal smb.conf.d share section.
// It performs basic sanitization (strip newlines) and formats flags.
// The output starts with an informational comment for generated files.
func SmbFragment(name string, path string, ro bool, users []string) (string, error) {
	name = sanitizeInline(name)
	path = sanitizeInline(path)
	if name == "" {
		return "", errEmptyName
	}
	if path == "" {
		return "", errEmptyPath
	}
	roVal := "no"
	if ro {
		roVal = "yes"
	}
	browse := "yes"
	usersCSV := joinUsers(users)
	b := &strings.Builder{}
	b.WriteString("# Generated by NithronOS â€” DO NOT EDIT\n")
	b.WriteString("[")
	b.WriteString(name)
	b.WriteString("]\n")
	b.WriteString("path = ")
	b.WriteString(path)
	b.WriteString("\n")
	b.WriteString("read only = ")
	b.WriteString(roVal)
	b.WriteString("\n")
	b.WriteString("browseable = ")
	b.WriteString(browse)
	b.WriteString("\n")
	b.WriteString("valid users = ")
	b.WriteString(usersCSV)
	b.WriteString("\n")
	return b.String(), nil
}

// NfsLine builds one /etc/exports line for the given path.
func NfsLine(path string, ro bool) (string, error) {
	path = sanitizeInline(path)
	if path == "" {
		return "", errEmptyPath
	}
	mode := "rw"
	if ro {
		mode = "ro"
	}
	return path + "  *(" + mode + ",sync,no_subtree_check,root_squash)", nil
}

func sanitizeInline(s string) string {
	// remove newlines and carriage returns; trim surrounding spaces
	s = strings.ReplaceAll(s, "\n", " ")
	s = strings.ReplaceAll(s, "\r", " ")
	return strings.TrimSpace(s)
}

func joinUsers(users []string) string {
	if len(users) == 0 {
		return ""
	}
	cleaned := make([]string, 0, len(users))
	for _, u := range users {
		u = sanitizeInline(u)
		// disallow commas inside usernames in this context
		u = strings.ReplaceAll(u, ",", "")
		if u != "" {
			cleaned = append(cleaned, u)
		}
	}
	return strings.Join(cleaned, ",")
}
